#!/bin/bash

# CHECK JAVA VERSION
java="java"
jsedstring="s/.*1\.\(.*\)\..*/\1/"
jVersion=$($java -version 2>&1 | grep version | awk '{ print $3 }' | sed $jsedstring)
jVersion=$(echo "${jVersion%%.*}" | sed 's/\"//')
if [[ $jVersion -lt 8 ]];
then
    echo "Wrong version of java. Please use Java 8 or higher."
    exit 1
fi

# Linux readlink -f alternative for Mac OS X
function readlinkUniversal() {
    targetFile=$1

    cd `dirname $targetFile`
    targetFile=`basename $targetFile`

    # iterate down a (possible) chain of symlinks
    while [ -L "$targetFile" ]
    do
        targetFile=`readlink $targetFile`
        cd `dirname $targetFile`
        targetFile=`basename $targetFile`
    done

    # compute the canonicalized name by finding the physical path 
    # for the directory we're in and appending the target file.
    phys_dir=`pwd -P`
    result=$phys_dir/$targetFile
    echo $result
}

# CHECK AVAILABLE RAM
os=`uname`
delta=100
dir=""
case $os in
    Darwin)
        freeBlocks=$(vm_stat | grep free | awk '{ print $3 }' | sed 's/\.//')
        inactiveBlocks=$(vm_stat | grep inactive | awk '{ print $3 }' | sed 's/\.//')
        speculativeBlocks=$(vm_stat | grep speculative | awk '{ print $3 }' | sed 's/\.//')
        freeMb=$((($freeBlocks+$speculativeBlocks)*4096/1048576))
        inactiveMb=$(($inactiveBlocks*4096/1048576))
        maxMb=$((($freeMb+$inactiveMb-$delta)))
        dir=$(dirname "$(readlinkUniversal "$0")")
    ;;
    Linux)
        rFreeMb=$(free -m | grep Mem | awk '{ print $4 }')
        maxMb=$(($rFreeMb-$delta))
        dir="$(dirname "$(readlink -f "$0")")"
    ;;
    FreeBSD)
        freeBlocks=$(vmstat -s | grep -E 'free$' | awk '{ print $1 }')
        inactiveBlocks=$(vmstat -s | grep inactive | awk '{ print $1 }')
        freeMb=$(( ($freeBlocks+$inactiveBlocks)*4096/1048576 ))
        maxMb=$(($freeMb-$delta))
        dir=$(dirname "$(readlinkUniversal "$0")") 
    ;;
    *)
       echo "Your operation system $os is not supported."
       exit 1
    ;;
esac

ammArgs=()
javaArgs=()

needXmxXms=true

while [[ $# > 0 ]]
do
    key="$1"
    shift
    case $key in
        -D*|-X*|-ea|-agentlib*)
            javaArgs+=(${key})

            case $key in
                -Xmx*|-Xms*)
                    needXmxXms=false
                    ;;
            esac

            ;;
         -v|--version)
            echo "$ringsString"
            exit 0
            ;;
         --print-jargs)
            printJArgs=true
            ;;
        *)
            ammArgs+=("${key}")
            ;;
    esac
done


if [[ ${needXmxXms} == true ]]
then
    targetXmx=12000

    if [[ $targetXmx -gt $maxMb ]];
    then
        targetXmx=$maxMb
    fi

    javaArgs+=("-Xmx${targetXmx}m")

    targetXms=$((${targetXmx}*2/3))

    if [[ $targetXms -lt 2000 ]];
    then
        targetXms=$targetXmx
    fi

    javaArgs+=("-Xms${targetXms}m")
fi


jar=""

for j in "$dir/algebench.jar"
do
    if [[ -e "$j" ]];
    then
        jar=$j
        break
    fi
done

if [[ "$jar" == "" ]];
then
    echo "No jar."
    exit 1
fi

$java -XX:+AggressiveOpts "${javaArgs[@]}" -jar $jar "${ammArgs[@]}"
